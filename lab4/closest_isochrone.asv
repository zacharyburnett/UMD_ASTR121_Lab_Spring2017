function [ visual_isochrone_name, blue_isochrone_name ] = closest_isochrone( cluster_magnitudes, isochrones )
    %CLOSEST_ISOCHRONE Returns name of closest isochrone given cluster
    %magnitudes and isochrone struct
    
    % get field names of isochrone struct
    fields = fieldnames(isochrones);
    
    % create table of 0s to store sumsquares
    residual_sumsquares = array2table(zeros(2, length(fields)), 'VariableNames', fields, 'RowNames', {'visual', 'blue'});
    
    for index = 1:numel(fields)
        current_isochrone = isochrones.(fields{index});
        interpolated_visual = interp1(current_isochrone.V, linspace(1, length(current_isochrone.V), length(cluster_magnitudes.V)), 'spline')';
        interpolated_blue = interp1(current_isochrone.B, linspace(1, length(current_isochrone.B), length(cluster_magnitudes.V)), 'spline')';
        residual_sumsquares{1, index} = nansum((cluster_magnitudes.V - interpolated_visual(1:find(diff(interpolated_visual) >= 0))).^2);
        residual_sumsquares{2, index} = nansum((cluster_magnitudes.V - interpolated_blue).^2);
    end
    
    % find isochrones closest to the visual and blue magnitudes based on
    % sum of squares
    visual_isochrone_name = residual_sumsquares('visual', residual_sumsquares{'visual',:} == min(residual_sumsquares{'visual',:})).Properties.VariableNames;
    blue_isochrone_name = residual_sumsquares('blue', residual_sumsquares{'blue',:} == min(residual_sumsquares{'blue',:})).Properties.VariableNames;
end
